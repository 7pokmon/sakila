<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.FilmMapper">
	
	<insert id="insertFilm" 
			parameterType="com.gd.sakila.vo.Film">
		<selectKey keyProperty="filmId" resultType="Integer" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO 
			film(
				title,
				description,
				release_year,
				language_id,
				original_language_id,
				rental_duration,
				rental_rate,
				length,
				replacement_cost,
				rating,
				special_features
			) VALUES (
				#{title},
				#{description},
				#{releaseYear},
				#{languageId},
				#{originalLanguageId},
				#{rentalDuration},
				#{rentalRate},
				#{length},
				#{replacementCost},
				#{rating},
				#{specialFeatures}
			)
			
	</insert>
	<insert id="insertFilmCategory"
			parameterType="java.util.Map">
		INSERT INTO
			film_category(
				film_id,
				category_id
			) VALUES (
				#{filmId},
				#{categoryId}
			)
	</insert>
	
	<!-- nicer_but_slower_film_list view -->
	<select id="selectFilmList"
			parameterType="java.util.Map"
			resultType="java.util.Map">
		SELECT
			FID,
			title,
			category,
			price,
			rating,
			actors
		FROM
			nicer_but_slower_film_list
		<where>
			<if test="categoryVal != null">
				AND category = #{categoryVal}
			</if>
			<if test="priceVal != null">
				AND price = #{priceVal}
			</if>
			<if test="ratingVal != null">
				AND rating = #{ratingVal}
			</if>
			<if test="titleVal != null">
				AND title LIKE CONCAT('%', #{titleVal}, '%')
			</if>
			<if test="actorsVal != null">
				AND actors LIKE CONCAT('%', #{actorsVal}, '%')
			</if>
		</where>
		ORDER BY FID DESC
		LIMIT
			#{beginRow}, #{rowPerPage}
	</select>
	<select id="selectFilmTotal"
			resultType="Integer"
			parameterType="String">
		SELECT COUNT(*) FROM nicer_but_slower_film_list
		<where>
			<if test="categoryVal != null">
				AND category = #{categoryVal}
			</if>
			<if test="priceVal != null">
				AND price = #{priceVal}
			</if>
			<if test="ratingVal != null">
				AND rating = #{ratingVal}
			</if>
			<if test="titleVal != null">
				AND title LIKE CONCAT('%', #{titleVal}, '%')
			</if>
			<if test="actorsVal != null">
				AND actors LIKE CONCAT('%', #{actorsVal}, '%')
			</if>
		</where>
	</select>
	<select id="selectFilmOneByFID"
			resultType="java.util.Map"
			parameterType="Integer">
		SELECT 
			f.film_id filmId,
			f.description,
			f.release_year releaseYear,
			f.language_id languageId,
			f.rental_duration rentalDuration,
			f.rental_rate rentalRate,
			f.length,
			f.replacement_cost replacementCost,
			f.rating,
			f.special_features specialFeatures,
			f.last_update lastUpdate,
			n.actors actors
		FROM film f 
			LEFT JOIN nicer_but_slower_film_list n 
			ON f.film_id=n.FID 
   		WHERE 
   			film_id = #{FID}
	</select>
	<!-- 프로시저 사용문법 -->
	<!-- Map : filmId, 		(IN)
			   storeId, 	(IN)
			   filmCount  	(OUT)
	-->
	<select id="selectFilmInStock"
			parameterType="java.util.Map"
			resultType="Integer"
			statementType="CALLABLE">
		{
			call film_in_stock(
				#{filmId},
				#{storeId},
				#{filmCount, mode=OUT, jdbcType=DECIMAL, javaType=Integer}
			)
		}
	</select>
	<select id="selectRatingList"
			resultType="String">
		SELECT
			DISTINCT rating
		FROM
			nicer_but_slower_film_list
		ORDER BY rating ASC
	</select>
	<select id="selectPriceList"
			resultType="String">
		SELECT
			DISTINCT price
		FROM
			nicer_but_slower_film_list
		ORDER BY price ASC
	</select>
	<!-- 배우리스트 체크박스 O, X -->
	<select id="selectActorList"
			resultType="java.util.Map"
			parameterType="Integer">
		SELECT 
			a.actor_id actorId, 
			CONCAT(first_name, ' ', last_name) name, 
			IF(t.actor_id IS NULL, 'X', 'O') ck
		FROM 
			actor a 
				LEFT JOIN (SELECT *
							FROM film_actor
							WHERE film_id = #{FID}) t
		ON a.actor_id = t.actor_id	
		ORDER BY first_name ASC
	</select>
	<delete id="deleteCheckActor"
			parameterType="java.util.Map">
		DELETE FROM 
			film_actor 
		WHERE 
			film_id = #{FID}	
	</delete>
	<insert id="insertCheckActor"
			parameterType="java.util.Map">
		INSERT INTO 
			film_actor(
				actor_id,
				film_id
			) VALUES(
				#{ck},
				#{FID}
			)
	</insert>
</mapper>