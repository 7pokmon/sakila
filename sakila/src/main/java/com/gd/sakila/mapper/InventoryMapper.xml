<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.InventoryMapper">
	<!-- 재고목록List 마지막 렌탈기록 표시 -->
	<select id="selectInventoryList"
			resultType="java.util.Map"
			parameterType="java.util.Map">
		SELECT
			i.inventory_id inventoryId,
			r.rental_id rentalId,
    		f.title title,
    		f.film_id filmId,
   			i.store_id storeId,
   			f.rental_rate rentalRate,
   			f.rating rating,
    		if(r.rental_date IS NULL, 'T', '') rentalDate,
		   	if(r.return_date IS NULL, 'T', '') returnDate,
		   	DATEDIFF(CURRENT_DATE(), r.rental_date) - f.rental_duration overdue
		FROM
		   inventory i
		LEFT JOIN(
			   SELECT *
			   FROM rental
			   WHERE (rental_date) 
			   IN (
			      SELECT MAX(rental_date)
			      FROM rental GROUP BY inventory_id
			   )
			) r
				ON i.inventory_id = r.inventory_id
      		JOIN film f 
      			ON i.film_id = f.film_id
		<where>
	        <if test="searchWord != null and searchWord !='' ">
	        	AND title LIKE CONCAT('%', #{searchWord}, '%')
	        </if>
	        <if test="storeId != null and storeId !='' ">
	        	AND store_id = ${storeId}
	        </if>
      	</where>
			GROUP BY i.inventory_id
			ORDER BY i.inventory_id ASC
			LIMIT
				#{beginRow}, #{rowPerPage}
	</select>
	<select id="selectInventoryTotal"
			resultType="Integer"
			parameterType="java.util.Map">
		SELECT 
			COUNT(*)
		FROM 
			inventory i
		JOIN film f
			ON i.film_id = f.film_id	
		<where>
	        <if test="searchWord != null and searchWord !='' ">
	        	AND title LIKE CONCAT('%', #{searchWord}, '%')
	        </if>
	        <if test="storeId != null and storeId !='' ">
	        	AND store_id = ${storeId}
	        </if>
      	</where>
	</select>
	<!-- 인벤토리ID에따른 렌탈기록 -->
	<select id="selectRentalOne" 
			resultType="java.util.Map" 
			parameterType="Integer">
		SELECT
			r.rental_id rentalId,
			r.rental_date rentalDate,
			CONCAT(c.first_name, " ", c.last_name) name,
			r.return_Date returnDate,
			r.staff_id staffId
		FROM
			rental r 
		LEFT JOIN customer c 
			ON r.customer_id = c.customer_id
		WHERE
			r.inventory_id = #{inventoryId}
		ORDER BY
			r.rental_date DESC
	</select>
	<!-- 비디오 반납 -->
	<update id="updateReturnDate"
			parameterType="Integer">
		UPDATE rental
			SET return_date = NOW()
		WHERE
			rental_id = #{rentalId}		
	</update>
	<!-- 재고추가 -->
	<insert id="insertInventory" 
			parameterType="java.util.Map">
		INSERT INTO
			inventory(
				film_id,
				store_id
			) VALUES(
				#{filmId},
				#{storeId}
			)
	</insert>
</mapper>